
class Monster {
  constructor(name) {
    this.name = name;
  }
  attack() {
    console.log(`${this.name} attacked`);
  }

  walk() {
    console.log(`${this.name} walked`);
  }
}
class FlyingMonster extends Monster {
  fly() {
    console.log(`${this.name} flew`);
  }
}

class SwimmingMonster extends Monster {
  swim() {
    console.log(`${this.name} swim`);
  }
}

// draw back flying swimming master was not possible in inheritance
//************************* */
class FlyingSwimmingMonster extends  SwimmingMonster {

  fly() {
    console.log(`${this.name} flew`);
  }
}
//*************************** */
const bear = new Monster('bear');

bear.walk();
bear.attack();

const eagle = new FlyingMonster('eagle');
eagle.walk();
eagle.attack();
eagle.fly();

const shark = new SwimmingMonster('shark')
shark.walk()
shark.attack()
shark.swim()   
//**************************

//Implementation of Composition

function swimmer({name}) {
return {
  swim: () => console.log(`
  ${name} swam`)
}

}

function flyer({name}) {
  return {
    fly: () => console.log(`
    ${name} flew`)
  }
  
  }

  function attackerAndWalker({name}) {
    return {
      attack: () => console.log(`
      ${name} attack`),
      walk: () => console.log(`${name} walk` ) 
    }
    
    }

function swimmingMonsterCreator(name) {
  const monster = {name: name}

return {
  ...monster,
  ...attackerAndWalker(monster),
  ...swimmer(monster)


}

}

function FlyingSwimmingMonsterCreator(name) {
  const monster = {name: name}

  return {
    ...monster,
    ...attackerAndWalker(monster),
    ...swimmer(monster),
  ...flyer(monster)
  }
}
console.log('--------------Composition------')
const obj = FlyingSwimmingMonsterCreator ('Monster')

obj.attack()
obj.walk()
obj.swim()
obj.fly()








